plugins {
    id 'com.android.application'
    id 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'
    id 'com.google.gms.google-services'
    id 'jacoco'
}

def Properties properties = new Properties()
properties.load(project.rootProject.file("local.properties").newDataInputStream())

android {
    compileSdk 31

    defaultConfig {
        applicationId "com.hangyeollee.go4lunch"
        minSdk 21
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        resConfigs "en","fr","kr"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            resValue "string", "facebook_application_id", properties.getProperty("FACEBOOK_APPLICATION_ID", "")
            resValue "string", "facebook_client_token", properties.getProperty("FACEBOOK_CLIENT_TOKEN", "")
        }
    }

    buildFeatures {
        viewBinding true
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        debug {
            storeFile file('../debug.jks')
            storePassword 'android'
            keyAlias 'go4lunch'
            keyPassword 'android'
        }
    }
}

dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.0.9'

    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'

    // Gson, Retrofit, http Interceptor
    implementation 'com.google.code.gson:gson:2.8.7'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.0'

    // Glide
    implementation 'com.github.bumptech.glide:glide:4.13.0'

    // Firebase BoM, analytics, auth, Firestore
    // When using the BoM, don't specify versions in Firebase dependencies
    implementation platform('com.google.firebase:firebase-bom:29.2.1')
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-auth'
    implementation 'com.google.firebase:firebase-firestore'

    // Facebook SDK
    implementation 'com.facebook.android:facebook-android-sdk:12.3.0'

    // Google Auth, Maps, Location, Autocomplete
    implementation 'com.google.android.gms:play-services-auth:20.1.0'
    implementation 'com.google.android.gms:play-services-maps:18.1.0'
    implementation 'com.google.android.gms:play-services-location:19.0.1'

    // What the heck is this ?
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    // WorkManager
    implementation "androidx.work:work-runtime:2.7.1"

    //----------------TEST implementations start----------------//

    testImplementation 'junit:junit:4.+'
    testImplementation 'org.mockito:mockito-core:3.+'
    testImplementation "org.mockito:mockito-inline:3.11.2"
    // Helps testing livedata : InstantTaskExecutorRule for example
    testImplementation "androidx.arch.core:core-testing:2.1.0"

    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    //To avoid Memory leak
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.9.1'

}

def openReport(htmlOutDir) {
    final reportPath = "$htmlOutDir\\index.html"

    println "HTML Report: $reportPath"

    def os = org.gradle.internal.os.OperatingSystem.current()
    if (os.isWindows()) {
        exec { commandLine 'cmd', '/c', "start $reportPath" }
    } else if (os.isMacOsX()) {
        exec { commandLine 'open', "$reportPath" }
    } else if (os.isLinux()) {
        try {
            exec { commandLine 'xdg-open', "$reportPath" }
        } catch (Exception ignored) {
            if (localProperties.containsKey("linux-html-cmd")) {
                exec { commandLine properties.get("linux-html-cmd"), "$reportPath" }
            } else {
                println "'linux-html-cmd' property could not be found in 'local.properties'"
            }
        }
    }
}

jacoco {
    toolVersion = "0.8.7"
}

tasks.withType(Test) {
    jacoco {
        includeNoLocationClasses = true
        excludes = ['jdk.internal.*'] // Allows it to run on Java 11
    }
}

// TODO See if this project matured : https://github.com/growse/Android-Test-Coverage-Sample
//  or this sample : https://github.com/android/testing-samples/pull/411
task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {

    doLast {
        openReport layout.buildDirectory.dir("reports/jacoco/$name/html").get().asFile
    }

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*_Impl*.*', // Room implementations
            '**/*Binding.*',
            '**/*Fragment.*',
            '**/*Activity.*',
            '**/*Adapter.*',
            '**/*DiffCallback.*',
            '**/*ViewHolder.*',
            '**/*ViewModelFactory.*',
            '**/*Entity.*',
            '**/*Response.*',

            // Repositories
            '**/*FirebaseRepository*.*',
            '**/*LocationRepository*.*',
            '**/*NearbySearchDataRepository*.*',
            '**/*PlaceDetailDataRepository*.*',

            // Utils
            '**/*NotificationWorker.*',
            '**/*UtilBox.*',
            '**/*BooleanSharedPreferencesLiveData.*',
            '**/*DistanceCalculator.*',
            '**/*GoogleApiHolder.*',

            // MVC APIs...
            '**/*LogInViewModel*.*',

            '**/*ViewState*.*',
            '**/*AppDatabase*.*',
            '**/BuildConfigResolver.*',
            '**/MainThreadExecutor.*',
            '**/*Test*.*',
            'android/**/*.*',
    ]
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code_coverage/debugAndroidTest/connected/**/*.ec'
    ]))
}